package com.StaticVoidGames.members;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import com.StaticVoidGames.TimestampedEvent;
import com.StaticVoidGames.spring.util.HtmlEscaper;
import com.StaticVoidGames.spring.util.PageDownUtils;

/**
 * Class encapsulating a registered member.
 */
@Entity
@Table( name = "Members" )
public class Member implements TimestampedEvent{
	
	/**
	 * The member's username.
	 * TODO: Separate the username and the ID so members can change their usernames, like on twitter? This requires changes all over the place though.
	 */
	@Id
	private String memberName;
	
	/**
	 * The hash for the member's password generated by bcrypt.
	 * In the local version, everybody's password is "password" without the quotes.
	 */
	private String bcryptHash;
	
	/**
	 * This member's email.
	 * In the local version, everybody's email is fake@StaticVoidGames.com
	 */
	private String email;
	

	/**
	 * The description entered by this user. This is in markdown.
	 */
	@Column(columnDefinition="long varchar")
	private String description;
	
	/**
	 * The short description/tagline to be shown in the user's profile thumbnail.
	 */
	private String tag;
	
	/**
	 * This member's profile picture.
	 */
	private String imageUrl;
	
	/**
	 * This was meant to be the person who referred this member to StaticVoidGames, but it was never really implemented.
	 * TODO: do something with this? Could be interesting if points or achievements are implemented.
	 */
	private String referrer;
	
	/**
	 * The time (MS since epoch) that this member registered.
	 */
	private long joinTimestamp;
	
	private boolean includeInLocalDatabase = true;
	
	
	private boolean activated = false;
	private String activationId;
	
	private int points = 0;
	private int notificationCount = 0;
	
	/**
	 * @deprecated the old-style password hash.
	 */
	private int passwordHash;
	
	/**
	 * @deprecated The user's alternate website. This will be deleted, as people can just put it in their description.
	 */
	private String website;
	
	
	
	/**
	 * No-args constructor required by Hibernate.
	 */
	public Member(){}
	
	public String getEscapedMemberName() {
		return HtmlEscaper.escape(memberName);
	}
	
	public String getUrlEscapedMemberName() {
		return HtmlEscaper.escapeUrlPart(memberName);
	}
	
	public String getUrlEscapedProfileImageUrl() {
		return HtmlEscaper.escapeUrlPart(imageUrl);
	}
	
	public String getParsedMemberName(){
		return PageDownUtils.getSanitizedHtml(memberName);
	}
	
	public String getParsedDescription(){
		return PageDownUtils.getSanitizedHtml(description);
	}
	
	public String getMemberName() {
		return memberName;
	}

	public String getEmail() {
		return email;
	}
	
	public String getImageUrl(){
		return imageUrl;
	}
	
	public long getJoinTimestamp(){
		return joinTimestamp;
	}
	
	public String getProfileImageUrl(){
		//if(imageUrl != null){
			return imageUrl;
		//}
		//else{
		//	Random r = new Random(joinTimestamp);
		//	return "http://s3.staticvoidgames.com/images/randomProfilePictures/profile" + r.nextInt(25) + ".jpg";
		//}
	}


	public String getWebsite() {
		return website;
	}

	public String getTag() {
		if(tag == null){
			return "";
		}
		return tag;
	}

	public String getReferrer() {
		return referrer;
	}

	public String getDescription() {
		return description;
	}
		
	public void setEmail(String email) {
		this.email = email;
	}

	public void setWebsite(String website) {
		this.website = website;
	}
	
	public void setTag(String tag){
		this.tag = tag;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setImageUrl(String imageUrl){
		this.imageUrl = imageUrl;
	}

	public void setMemberName(String memberName) {
		this.memberName = memberName;
	}

	public void setBcryptHash(String bcryptHash) {
		this.bcryptHash = bcryptHash;
	}
	
	public void setJoinTimestamp(long joinTimestamp) {
		this.joinTimestamp = joinTimestamp;
	}

	public int getPasswordHash() {
		return passwordHash;
	}

	public void setPasswordHash(int passwordHash) {
		this.passwordHash = passwordHash;
	}
	
	@Override
	public String getEventText() {
		return getEscapedMemberName() + " joined";
	}
	
	@Override
	public long getTimestamp() {
		return joinTimestamp;
	}

	@Override
	public String getRelativeUrl() {
		return "/members/" + getUrlEscapedMemberName();
	}

	@Override
	public String getMember() {
		return memberName;
	}


	public boolean isIncludeInLocalDatabase() {
		return includeInLocalDatabase;
	}


	public void setIncludeInLocalDatabase(boolean includeInLocalDatabase) {
		this.includeInLocalDatabase = includeInLocalDatabase;
	}


	public void setActivationId(String activationId) {
		this.activationId = activationId;
	}
	
	public String getActivationId() {
		return activationId;
	}
	
	public void setActivated(boolean activated){
		this.activated = activated;
	}
	
	public boolean isActivated(){
		return activated;
	}


	public String getBcryptHash() {
		return bcryptHash;
	}


	public int getPoints() {
		return points;
	}


	public void setPoints(int points) {
		this.points = points;
	}


	public int getNotificationCount() {
		return notificationCount;
	}


	public void setNotificationCount(int notificationCount) {
		this.notificationCount = notificationCount;
	}

}


